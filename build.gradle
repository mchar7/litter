plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.1'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = project.group
version = project.version

java {
    sourceCompatibility = project.java_version
    targetCompatibility = project.java_version
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot + WebFlux
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // Spring Security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.security:spring-security-crypto'
    implementation 'org.springframework.security:spring-security-oauth2-jose'

    // Docker compose support <-- caused problems
    // runtimeOnly 'org.springframework.boot:spring-boot-docker-compose'

    // Spring Data - reactive MongoDB
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'

    // SpringDoc OpenAPI doc generator for reactive WebFlux; this will generate and serve Swagger UI
    implementation 'org.springdoc:springdoc-openapi-webflux-ui:1.8.0'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // JWT & authentication libraries
    implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'
    implementation 'org.bouncycastle:bcprov-jdk18on:1.78.1' // for Argon2 password hashing

    // configuration processor
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
}

configurations {
    mockitoAgent
}
dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'

    // testing
    testImplementation 'org.mockito:mockito-core'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-webtestclient'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.testcontainers:testcontainers'
    testImplementation 'org.testcontainers:mongodb'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    mockitoAgent('org.mockito:mockito-core') {
        transitive = false
    }
}
tasks {
    test {
        useJUnitPlatform()
        jvmArgs += "-javaagent:${configurations.mockitoAgent.asPath}"
    }
}

springBoot {
    mainClass = 'org.ac.cst8277.chard.matt.litter.App'
}

bootJar {
    archiveFileName = "litter.jar"
}
