# This workflow verifies that the code compiles & tests pass on every push, pull request, or manual run.
# It also builds and pushes the Docker image when run by a pull request (to the main branch only)
#   or via workflow_dispatch (any branch).
name: CI
on:
  push: { }
  pull_request:
    branches:
      - main
  workflow_dispatch: { }

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          # Use pull request head ref if triggered by a pull request, otherwise use current ref
          ref: ${{ github.event.event_name == 'pull_request' && github.event.pull_request.head.ref || github.ref }}

      - name: Set up JDK
        uses: actions/setup-java@3a4f6e1af504cf6a31855fa899c6aa5355ba6c12
        with:
          distribution: 'corretto'
          java-version: '21'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@94baf225fe0a508e581a564467443d0e2379123b

      - name: Execute Gradle build (with tests)
        run: ./gradlew build

      - name: Debug the event
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Base ref: ${{ github.base_ref }}"
          echo "Head ref: ${{ github.head_ref }}"

      # Upload JAR artifact for main branch builds and PR builds targeting main
      - name: Upload JAR artifact
        if: ${{ github.ref == 'refs/heads/main' || (github.event_name == 'pull_request' && github.base_ref == 'main') }}
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08
        with:
          name: litter-jar
          path: build/libs/litter.jar
          if-no-files-found: error

  push-image:
    needs: build-and-test
    runs-on: ubuntu-latest
    # Run for main branch or PRs targeting main
    if: ${{ github.ref == 'refs/heads/main' || (github.event_name == 'pull_request' && github.base_ref == 'main') }}
    permissions:
      contents: read
      packages: write
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Download JAR artifact
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16
        with:
          name: litter-jar
          path: build/libs # download to the same directory as the Gradle build for consistency

      # Image path format: ghcr.io/owner/repo:{tag}
      #   Image repo must be lowercase and GitHub Actions doesn't have easy native string manipulation.
      #   Was causing issues when username had any uppercase. (Must work even if repo like: OwNeR/repo)
      #   See: https://github.com/orgs/community/discussions/10553
      - name: Set image path (to lowercase)
        id: image-path
        run: |
          imagePath="ghcr.io/${GITHUB_REPOSITORY,,}"
          echo "image_path=$imagePath" >> $GITHUB_OUTPUT
          echo "Image path: $imagePath"

      # Read version from gradle.properties and append to output.
      - name: Read version from gradle.properties
        id: app-version
        run: |
          set -euo pipefail # fail on error, unset variables, or pipe fails
          version=$(grep "^version=" gradle.properties | cut -d'=' -f2 | tr -d '[:space:]')
          if [ -z "$version" ]; then
            echo "Error: Version not found in gradle.properties"; exit 1
          fi
          echo "app_version=$version" >> $GITHUB_OUTPUT
          echo "App version: $version"

      - name: Log into container registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567
        with:
          registry: "ghcr.io"
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Tag Docker images:
      #  - PR to main: tag as branch and pr-{number}
      #  - Merged to main: tag with version, SHA, and 'latest'
      # Only merged images get permanent tags to keep the registry clean.
      - name: Prepare Docker metadata
        id: meta
        uses: docker/metadata-action@369eb591f429131d6889c46b94e711f089e6ca96
        with:
          images: |
            ${{ steps.image-path.outputs.image_path }}
          tags: |
            # For PRs: add ref tag and pr-{number} tag
            type=ref,enable=${{ github.event_name == 'pull_request' }}
            type=pr,prefix=pr-,enable=${{ github.event_name == 'pull_request' }}
            # For main: add version tag and sha tag
            type=raw,value=${{ steps.app-version.outputs.app_version }},enable=${{ github.ref == 'refs/heads/main' }}
            type=sha,enable=${{ github.ref == 'refs/heads/main' }}
          flavor: |
            latest=${{ github.ref == 'refs/heads/main' }} # add latest tag only on main branch

      - name: Build and push Docker image
        uses: docker/build-push-action@ca877d9245402d1537745e0e356eab47c3520991
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
