# This workflow is responsible for deploying the application to an Azure Kubernetes Service (AKS) cluster.
# It is triggered automatically when the CI workflow completes (for both PR and main branch deployments),
#   or it can be triggered manually via workflow_dispatch.
name: CD - Deploy to AKS
permissions: { } # default to minimal permission, overriding in jobs only as needed
env:
  ROOT_DOMAIN: "litter.dev"
on:
  # Trigger deployment after successful CI run (for both merged commits and PR builds)
  workflow_run:
    workflows: [ CI - Build and Push ]
    types:
      - completed
  # Allow manual trigger of workflow to deploy to specified environment
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        required: true
        description: "Deployment environment"
        options:
          - "dev"
          - "staging"
          - "prod"
      acme_provider_name:
        type: choice
        required: true
        description: "ACME provider"
        default: "Let's Encrypt - Staging"
        options:
          - "Let's Encrypt - Production"  # Ideal when deploying to publicly accessible domain
          - "Let's Encrypt - Staging"     # Ideal when frequently testing deployment (avoid rate limits on prod server)
      use_tls_from_kv:
        type: boolean
        required: false
        default: false
        description: "Use TLS cert & key from Key Vault? (always true for prod)"
jobs:
  check-context:
    runs-on: ubuntu-latest
    env:
      # must use env var for these to avoid CWE-94 & CWE-349:
      WF_RUN_HEAD: "${{ github.event.workflow_run.head_branch }}"
      WF_RUN_PR_BASE: "${{ github.event.workflow_run.pull_requests[0].base.ref }}"
    outputs:
      should_deploy: ${{ steps.should-deploy.outputs.should_deploy }}
    steps:
      - name: Get context of workflow trigger
        id: context-check
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "Workflow triggered manually."

          elif [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            echo "WF_RUN_HEAD: $WF_RUN_HEAD"
            echo "WF_RUN_PR_BASE: $WF_RUN_PR_BASE"
            echo "Workflow triggered by CI workflow's completion."

            if [[ "${{ github.event.workflow_run.event }}" == "push" ]]; then
              echo "CI triggered by a push event."
          
              if [[ "$WF_RUN_HEAD" == "main" ]]; then
                echo "Commit was pushed to main branch."
              else
                echo "Commit was pushed to ${WF_RUN_HEAD}, not the main branch."
                echo "deploymentRoadblock=true" >> $GITHUB_ENV
              fi

            elif [[ "${{ github.event.workflow_run.event }}" == "pull_request" ]]; then
              echo "CI triggered by a pull request event."

              if [[ "$WF_RUN_PR_BASE" == "main" ]]; then
                echo "The PR is targeting the main branch."
              else
                echo "The PR is not targeting the main branch."
                echo "deploymentRoadblock=true" >> $GITHUB_ENV
              fi

            else
              echo "Error: CI triggered by unsupported event '${{ github.event.workflow_run.event }}'."
              echo "deploymentRoadblock=true" >> $GITHUB_ENV
            fi
          else
            echo "Error: Unsupported event '${{ github.event_name }}'."
            echo "deploymentRoadblock=true" >> $GITHUB_ENV
          fi

      - name: Ensure CI success
        if: ${{ github.event_name == 'workflow_run' }}
        run: |
          if [[ "${{ github.event.workflow_run.conclusion }}" == "success" ]]; then
            echo "CI was successful."
          else
            echo "CI failed."
            echo "deploymentRoadblock=true" >> $GITHUB_ENV
          fi

      - name: Should deploy?
        id: should-deploy
        run: |
          if [[ "$deploymentRoadblock" == 'true' ]]; then
            echo "Deployment blocked."
            shouldDeploy=false
          else
            echo "Deployment will proceed."
            shouldDeploy=true
          fi
          echo "should_deploy=$shouldDeploy" >> $GITHUB_OUTPUT

  prepare-deployment:
    needs: [ check-context ]
    runs-on: ubuntu-latest
    if: ${{ needs.check-context.outputs.should_deploy == 'true' }}
    outputs:
      image_path: ${{ steps.image-path.outputs.image_path }}
      image_tag: ${{ steps.determine-image-tag.outputs.image_tag }}
      env_name: ${{ steps.determine-env.outputs.env_name }}
      env_url: ${{ steps.determine-env.outputs.env_url }}
      acme_provider_url: ${{ steps.determine-acme-url.outputs.acme_provider_url }}
      use_tls_from_kv: ${{ steps.determine-tls-cert-source.outputs.use_tls_from_kv }}
      app_helm_overrides_filename: ${{ steps.select-helm-overrides.outputs.app_helm_overrides_filename }}
    steps:
      # Image repo must be lowercase and GitHub Actions doesn't have easy string manipulation.
      #   Was causing issues when username had an uppercase letter
      #   See: https://github.com/orgs/community/discussions/10553
      - name: Set image path (to lowercase)
        id: image-path
        run: |
          imagePath="ghcr.io/${GITHUB_REPOSITORY,,}"
          echo "image_path=$imagePath" >> $GITHUB_OUTPUT
          echo "Image path: $imagePath"

      # Determine the deployment environment details (name & URL) based on the triggering context:
      # - For manual dispatch, use the given input for environment name
      # - For workflow_run:
      #   - If the CI workflow was triggered by a pull request event, deploy to the staging environment
      # - For push event (always to main branch):
      #   - Deploy to production environment
      - name: Determine Environment
        id: determine-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            envName="${{ github.event.inputs.environment }}"
          elif [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            if [[ "${{ github.event.workflow_run.event }}" == "pull_request" ]]; then
              envName="staging"
            else  # push events to main branch; deploy to production
              envName="prod"
            fi
          else
            echo "Error: Unsupported event '${{ github.event_name }}'."; exit 1
          fi
          # set env URL based on env name (e.g. "https://staging.litter.dev")
          envURL="https://$envName.$ROOT_DOMAIN"

          echo "env_name=$envName"  >> $GITHUB_OUTPUT
          echo "env_url=$envURL"    >> $GITHUB_OUTPUT
          echo "Environment: '$envName' (URL: '$envURL')"

      # Determine the correct ACME Server URL based on the triggering context:
      # - For workflow_dispatch:
      #   - If the provided ACME provider name is "Let's Encrypt - Production", use the production endpoint.
      #   - If the provided ACME provider name is "Let's Encrypt - Staging", use the staging endpoint.
      # - For workflow_run:
      #   - If the determined environment code is "prod", use the production endpoint;
      #     otherwise, use the staging endpoint.
      - name: Determine ACME Server URL
        id: determine-acme-url
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ github.event.inputs.acme_provider_name }}" == "Let's Encrypt - Production" ]]; then
              acmeProviderURL="https://acme-v02.api.letsencrypt.org/directory"
            elif [[ "${{ github.event.inputs.acme_provider_name }}" == "Let's Encrypt - Staging" ]]; then
              acmeProviderURL="https://acme-staging-v02.api.letsencrypt.org/directory"
            else
              echo "Error: Unsupported ACME provider '${{ github.event.inputs.acme_provider_name }}'."; exit 1
            fi
          elif [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            if [[ ${{ steps.determine-env.outputs.env_name }} == "prod" ]]; then
              acmeProviderURL="https://acme-v02.api.letsencrypt.org/directory"
            else
              acmeProviderURL="https://acme-staging-v02.api.letsencrypt.org/directory"
            fi
          else
            echo "Error: Unsupported event '${{ github.event_name }}'."; exit 1
          fi
          echo "acme_provider_url=$acmeProviderURL" >> $GITHUB_OUTPUT
          echo "ACME Provider URL: $acmeProviderURL"

        # Determine the correct Docker image tag based on the triggering context:
        # - For workflow_run:
        #   - If the triggering event is a pull request, tag with "pr-<pr number>"
        #   - Otherwise, for push events (merged to main) use the short SHA tag
        # - For manual (workflow_dispatch), default to the short SHA tag
      - name: Determine Image Tag
        id: determine-image-tag
        run: |
          shaShort=${GITHUB_SHA::7}
          if [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            CI_TRIGGER_EVENT="${{ github.event.workflow_run.event }}"
            if [[ "$CI_TRIGGER_EVENT" == "pull_request" ]]; then
              # For PR events, tag as pr-<pr number>
              prNum="${{ github.event.workflow_run.pull_requests[0].number }}"
              imageTag="pr-${prNum}"
            else
              imageTag="sha-$shaShort"
            fi
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            imageTag="latest"
          else
            echo "Error: Unsupported event '${{ github.event_name }}'."; exit 1
          fi
          echo "image_tag=$imageTag" >> $GITHUB_OUTPUT
          echo "Determined Image Tag: $imageTag"

      # Select the override file based on the determined environment:
      #  - "prod" -----------> use "./chart/values.prod.yaml"
      #  - "staging" or PR --> use "./chart/values.staging.yaml"
      #  - "dev" or other ---> use "./chart/values.dev.yaml"
      - name: Select Helm Overrides File
        id: select-helm-overrides
        run: |
          envName="${{ steps.determine-env.outputs.env_name }}"
          if [[ "$envName" == "prod" ]]; then
            overrideFile="values.prod.yaml"
          elif [[ "$envName" == "staging" ]]; then
            overrideFile="values.staging.yaml"
          else
            overrideFile="values.dev.yaml"
          fi
          echo "app_helm_overrides_filename=$overrideFile" >> $GITHUB_OUTPUT
          echo "Selected override file: $overrideFile"

      # Decide whether or not to use an existing TLS cert & key from the Azure Key Vault:
      # If event is workflow_run:
      #  - "prod" -----------> true; use values from KV
      #  - other ------------> false; generate new cert
      # If event is workflow_dispatch:
      #  - "prod" -----------> true; use values from KV
      #  - other ------------> defer to user input
      - name: Determine TLS Cert Source
        id: determine-tls-cert-source
        run: |
          if [[ "${{ steps.determine-env.outputs.env_name }}" == "prod" ]]; then
            useTLSFromKV=true
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            useTLSFromKV=${{ github.event.inputs.use_tls_from_kv || false }}
          else
            useTLSFromKV=false
          fi
          echo "use_tls_from_kv=$useTLSFromKV" >> $GITHUB_OUTPUT
          echo "Use TLS cert from Key Vault?: $useTLSFromKV"

  deploy-to-aks:
    needs: [ prepare-deployment, check-context ]
    runs-on: ubuntu-latest
    if: ${{ needs.check-context.outputs.should_deploy == 'true' || github.event.workflow_run.event == 'workflow_dispatch' }}
    env:
      # Azure credentials (cannot use azure/login action with service principal)
      #   See: https://github.com/hashicorp/terraform-provider-azurerm/issues/22034
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      TERRAFORM_WORKING_DIR: "./terraform"
    environment:
      name: ${{ needs.prepare-deployment.outputs.env_name }}
      url: ${{ needs.prepare-deployment.outputs.env_url }}
    permissions:
      contents: read
    timeout-minutes: 20 # This can take a WHILE, especially on first deployment & with cheap node SKUs
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd
        with:
          terraform_version: "~> 1.10.0"

      # Set the backend key dynamically
      # Ideally the 'azurerm' backend would support 'workspace_key_prefix = "env"' but it doesn't
      #   See: https://github.com/hashicorp/terraform/issues/28985
      # To get around this and have our deployments isolated, this job does a janky implementation of this
      #   by updating the key in the backend.tf file.
      # Again, this is a workaround and not the best practice, but we have to make due until the backend supports it.
      - name: Update Terraform backend key dynamically
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
        env:
          STATE_KEY_PREFIX: "env-" # Prefix for the state key
          WORKSPACE_CODE: ${{ needs.prepare-deployment.outputs.env_name }}
        run: |
          # Construct the new key by prepending the prefix to the workspace code
          stateKey="${STATE_KEY_PREFIX}${WORKSPACE_CODE}.tfstate"
          echo "Updating Terraform backend key to ${stateKey}"

          # Use regex to update the key, regardless of whitespace differences
          sed -E -i "s/^[[:space:]]*key[[:space:]]*=[[:space:]]*\"[^\"]*\"/  key = \"${stateKey}\"/" backend.tf

      - name: Terraform init
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
        run: terraform init

      - name: Terraform validate
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
        run: terraform validate

      - name: Terraform plan
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
        id: tf-plan
        run: | # For app image tag, use the output from determine-image-tag
          terraform plan \
            -var-file "example.tfvars" \
            -var "az_dns_zone_name=${{ env.ROOT_DOMAIN }}" \
            -var "az_subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
            -var "acme_provider_url=${{ needs.prepare-deployment.outputs.acme_provider_url }}" \
            -var "app_helm_overrides_filename=${{ needs.prepare-deployment.outputs.app_helm_overrides_filename }}" \
            -var "app_environment=${{ needs.prepare-deployment.outputs.env_name }}" \
            -var "app_image_repo_url=${{ needs.prepare-deployment.outputs.image_path }}" \
            -var "app_image_tag=${{ needs.prepare-deployment.outputs.image_tag }}" \
            -var "use_kv_tls_cert=${{ needs.prepare-deployment.outputs.use_tls_from_kv }}" \
            -out=tfplan

      - name: Terraform apply
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
        run: terraform apply -auto-approve tfplan

  report-pr-status:
    needs: [ prepare-deployment, deploy-to-aks ]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      statuses: write
    if: ${{ always() && toJson(github.event.workflow_run.pull_requests[0]) != 'null' }}
    steps:
      - name: Update PR status
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea
        with:
          script: |
            // Determine the status: success if deploy-to-aks succeeded; else failure
            const conclusion = '${{ needs.deploy-to-aks.result || 'failure' }}' === 'success' ? 'success' : 'failure';
            // Use the PR head commit SHA for status updates
            const pr = github.event.workflow_run.pull_requests[0];
            const commitSha = pr.head.sha;
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: commitSha,
              state: conclusion,
              context: 'CD - Deploy to AKS',
              description: conclusion === 'success' ? 'Staging deployment successful' : 'Deployment failed',
              target_url: '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
            });
