# This workflow removes all resources from a given environment to avoid unnecessary costs.
# It is triggered when a PR is closed and the base branch is 'main', automatically cleaning up the staging environment.
# It can also be manually dispatched to clean up the specified environment.
name: CD - Destroy AKS Env
on:
  # Allow manual trigger of workflow to destroy the specified environment
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        required: true
        description: "Environment to destroy"
        options:
          - "dev"
          - "staging"
          - "prod"
  # Automatically trigger when a PR is closed for the Staging environment
  pull_request:
    types: [ closed ]
jobs:
  cleanup:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.pull_request.base.ref == 'main' }}
    env:
      # Azure credentials (cannot use azure/login action with service principal)
      #   See: https://github.com/hashicorp/terraform-provider-azurerm/issues/22034
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      TERRAFORM_WORKING_DIR: "./terraform"
    permissions:
      contents: read
    timeout-minutes: 10 # this may take a while
    steps:
      - name: Git checkout for Terraform files
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          ref: ${{ github.sha }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd
        with:
          terraform_version: "~> 1.10.0"

      # Set the backend key dynamically
      # Ideally the 'azurerm' backend would support 'workspace_key_prefix = "env"' but it doesn't
      #   See: https://github.com/hashicorp/terraform/issues/28985
      # To get around this and have our deployments isolated, this job does a janky implementation of this
      #   by updating the key in the backend.tf file.
      # Again, this is a workaround and not the best practice, but we have to make due until the backend supports it.
      - name: Update Terraform backend key dynamically
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
        env:
          STATE_KEY_PREFIX: "env-" # Prefix for the state key
          # staging if the PR is closed and the base branch is 'main', otherwise use the input value:
          WORKSPACE_CODE: ${{ github.event.inputs.environment || github.event_name == 'pull_request' && 'staging' }}
        run: |
          # Construct the new key by prepending the prefix to the workspace code
          stateKey="${STATE_KEY_PREFIX}${WORKSPACE_CODE}.tfstate"
          echo "Updating Terraform backend key to ${stateKey}"

          # Use regex to update the key, regardless of whitespace differences
          sed -E -i "s/^[[:space:]]*key[[:space:]]*=[[:space:]]*\"[^\"]*\"/  key = \"${stateKey}\"/" backend.tf

      - name: Terraform init
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
        run: terraform init

      - name: Terraform destroy
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
        run: |
          echo "Cleaning up staging environment for PR #${{ github.event.pull_request.number }}"
          terraform destroy -auto-approve \
            -var-file=example.tfvars \
            -var="az_subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
            -var="app_environment=staging"
