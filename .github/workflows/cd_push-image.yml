# This workflow is responsible for building and pushing the Docker image.
# It uses the “litter-jar” artifact produced by the CI - Build and Test workflow.
# It is triggered automatically when the build workflow completes on the main branch,
#   or it can be triggered manually via workflow_dispatch (optionally passing a build_run_id).
name: CD - Push Image
permissions:
  contents: read
  packages: write
on:
  workflow_run:
    workflows: [ CI - Build and Test ]
    types:
      - completed
    branches:
      - main
  workflow_dispatch:
    inputs:
      build_run_id:
        description: 'The build run ID to download the artifact from'
        required: true

jobs:
  push-image:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Determine the build run ID:
      - name: Determine Build Run ID
        id: determine-run
        run: |
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            echo "BUILD_RUN_ID=${{ github.event.workflow_run.id }}" >> $GITHUB_OUTPUT
          elif [ -n "${{ github.event.inputs.build_run_id }}" ]; then
            echo "BUILD_RUN_ID=${{ github.event.inputs.build_run_id }}" >> $GITHUB_OUTPUT
          fi

      # Download the artifact using the download-artifact action
      - name: Download JAR Artifact from Build Workflow
        uses: actions/download-artifact@v4
        with:
          name: litter-jar
          run-id: ${{ steps.determine-run.outputs.BUILD_RUN_ID }}
          path: build/libs

      # Image repo must be lowercase and GitHub Actions doesn't have easy string manipulation.
      #   Was causing issues when username had an uppercase letter
      #   See: https://github.com/orgs/community/discussions/10553
      - name: Set image path (to lowercase)
        id: image-path
        run: |
          imagePath="ghcr.io/${GITHUB_REPOSITORY,,}"
          echo "image_path=$imagePath" >> $GITHUB_OUTPUT
          echo "Image path: $imagePath"

      # Read version from gradle.properties and append to output.
      - name: Read version from gradle.properties
        id: app-version
        run: |
          set -euo pipefail # fail on error, unset variables, or pipe fails
          version=$(grep "^version=" gradle.properties | cut -d'=' -f2 | tr -d '[:space:]')
          if [ -z "$version" ]; then
            echo "Error: Version not found in gradle.properties"; exit 1
          fi
          echo "app_version=$version" >> $GITHUB_OUTPUT

      - name: Log into container registry
        uses: docker/login-action@v3
        with:
          registry: "ghcr.io"
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ steps.image-path.outputs.image_path }}
          tags: |
            ${{ steps.app-version.outputs.app_version }}
            ${{ github.sha }}
          flavor: latest=true # This will tag the image with 'latest' as well as SHA and app version

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
