name: Build and Deploy

env:
  AZURE_AKS_CLUSTER_NAME: litter-k8s-cluster
  AZURE_AKS_RESOURCE_GROUP: litter-k8s
  K8S_NAMESPACE: litter
  REGISTRY: ghcr.io

on:
  pull_request:
    branches:
      - main
  workflow_dispatch: { }

jobs:
  build-with-gradle:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: '21'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Execute Gradle build (with tests)
        run: ./gradlew build

      # save the built JAR as artifact for building Docker image, ensure success
      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: build/libs/litter.jar
          if-no-files-found: error

  image-and-push:
    runs-on: ubuntu-latest
    environment: "Actions Environment"
    needs:
      - build-with-gradle
    permissions:
      contents: read
      packages: write
    outputs:
      image_path: ${{ steps.image-path.outputs.image_path }}
    timeout-minutes: 5

    steps:
      # checkout code for Dockerfile
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: app-jar

      # image repo must be lowercase and GitHub Actions makes this difficult
      # see: https://github.com/orgs/community/discussions/10553
      - name: Set image path (to lowercase)
        id: image-path
        run: |
          imagePath="${REGISTRY}/${GITHUB_REPOSITORY,,}"
          echo "image_path=$imagePath" >> $GITHUB_OUTPUT
          echo "Image path: $imagePath"

      # read version from gradle.properties and append to output so it can be used later
      - name: Read version from gradle.properties
        id: app-version
        run: |
          VERSION=$(grep "^version=" gradle.properties | cut -d'=' -f2 | tr -d '[:space:]')
          if [ -z "$VERSION" ]; then
            echo "Error: Version not found in gradle.properties"; exit 1
          fi
          echo "app_version=$VERSION" >> $GITHUB_OUTPUT

      - name: Log into registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ steps.image-path.outputs.image_path }}
          tags: |
            ${{ steps.app-version.outputs.app_version }}
            ${{ github.sha }}
          flavor: latest=true

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy-to-aks_staging:
    runs-on: ubuntu-latest
    environment: "Actions Environment"
    needs:
      - image-and-push
    permissions:
      actions: read
      contents: read
    timeout-minutes: 5

    steps:
      # checkout code for Helm chart
      - name: Git checkout
        uses: actions/checkout@v4

      - name: Azure login
        uses: Azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get k8s context
        uses: Azure/aks-set-context@v4
        with:
          cluster-name: ${{ env.AZURE_AKS_CLUSTER_NAME }}
          resource-group: ${{ env.AZURE_AKS_RESOURCE_GROUP }}

      - name: Generate manifests with Helm
        uses: Azure/k8s-bake@v3
        id: bake
        with:
          renderEngine: helm
          namespace: ${{ env.K8S_NAMESPACE }}
          helmChart: ./chart/
          overrideFiles: ./chart/values.yaml
          overrides: |
            app.image.repository: ${{ needs.image-and-push.outputs.image_path }}
            app.image.tag: ${{ github.sha }}

      - name: Validate generated manifests
        uses: Azure/k8s-lint@v3
        with:
          manifests: ${{ steps.bake.outputs.manifestsBundle }}

      - name: Deploy app to AKS
        uses: Azure/k8s-deploy@v5
        with:
          action: deploy
          namespace: ${{ env.K8S_NAMESPACE }}
          manifests: ${{ steps.bake.outputs.manifestsBundle }}
          imagepullsecrets: container-registry-secret