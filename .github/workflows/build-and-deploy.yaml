name: Build and Deploy

env:
  AZURE_AKS_CLUSTER_NAME: litter-k8s-cluster
  AZURE_AKS_RESOURCE_GROUP: litter-k8s
  K8S_NAMESPACE: litter
  REGISTRY: ghcr.io

on:
  workflow_dispatch: { }

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: "Actions Environment"
    outputs:
      image_path: ${{ steps.image-path.outputs.image_path }}
      app_version: ${{ steps.app-version.outputs.app_version }}
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read version from gradle.properties
        id: app-version
        run: |
          VERSION=$(grep "^version=" gradle.properties | cut -d'=' -f2)
          if [ -z "$VERSION" ]; then
            echo "Error: Version not found in gradle.properties"
            exit 1
          fi
          echo "app_version=$VERSION" >> $GITHUB_OUTPUT
          echo "Detected project version: $VERSION"

      # image repo must be lowercase and GitHub Actions makes this difficult
      # see: https://github.com/orgs/community/discussions/10553
      - name: Set image path (to lowercase)
        id: image-path
        run: |
          imagePath="${REGISTRY}/${GITHUB_REPOSITORY,,}"
          echo "image_path=$imagePath" >> $GITHUB_OUTPUT
          echo "Image path: $imagePath"

      - name: Log into registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ steps.image-path.outputs.image_path }}
          tags: |
            ${{ steps.app-version.outputs.app_version }}
            ${{ github.sha }}
          flavor: latest=true

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy-to-aks:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: "Actions Environment"
    permissions:
      actions: read
      contents: read

    steps:
      - name: Git checkout
        uses: actions/checkout@v4

      - name: Azure login
        uses: Azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get k8s context
        uses: Azure/aks-set-context@v4
        with:
          cluster-name: ${{ env.AZURE_AKS_CLUSTER_NAME }}
          resource-group: ${{ env.AZURE_AKS_RESOURCE_GROUP }}

      - name: Generate manifests with Helm
        uses: Azure/k8s-bake@v3
        with:
          renderEngine: helm
          namespace: ${{ env.K8S_NAMESPACE }}
          helmChart: ./chart/
          overrideFiles: ./chart/values.yaml
          overrides: |
            app.image.repository: ${{ needs.build-and-push.outputs.image_path }}
            app.image.tag: ${{ needs.build-and-push.outputs.app_version }}
            app.env.jwtSecret: ${{ secrets.JWT_SECRET }}
            app.env.mongodbUri: ${{ secrets.MONGODB_URI }}
            mongo.volume.csi.volumeHandle: ${{ secrets.MONGO_CSI_VOLUMEHANDLE }}
        id: bake

      - name: Validate generated manifests
        uses: Azure/k8s-lint@v2.0
        with:
          manifests: ${{ steps.bake.outputs.manifestsBundle }}

      - name: Deploy app to AKS
        uses: Azure/k8s-deploy@v5
        with:
          action: deploy
          namespace: ${{ env.K8S_NAMESPACE }}
          manifests: ${{ steps.bake.outputs.manifestsBundle }}
          imagepullsecrets: container-registry-secret