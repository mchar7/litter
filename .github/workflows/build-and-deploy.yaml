name: Build and Deploy with Terraform
permissions:
  contents: read
env:
  REGISTRY: ghcr.io
  AZ_DNS_RG: "litter-dns-rg"
  AZ_DNS_ZONE_NAME: "litter.dev"
  AZ_AKS_RG: litter-k8s
  AZ_AKS_CLUSTER_NAME: litter-k8s-cluster
on:
  # On pull request to 'main' branch, deploy to 'staging' k8s environment
  #   to further test the app. Once manually approved, the app is deployed to 'prod'
  pull_request:
    branches:
      - main
  # Allow manual trigger of workflow to deploy to specified environment
  workflow_dispatch:
    inputs:
      environment:
        description: "Deployment environment"
        type: choice
        required: true
        options:
          - "dev"
          - "staging"
          - "prod"

jobs:
  # Build the app with Gradle, generating test reports and (if successful) a JAR artifact
  build-with-gradle:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: '21'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Execute Gradle build (with tests)
        run: ./gradlew build

      # Save the built JAR as an artifact for Docker image creation
      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: litter-jar
          path: build/libs/litter.jar
          if-no-files-found: error

  # If build (& tests) successful, build Docker image and push to container registry
  image-and-push:
    runs-on: ubuntu-latest
    needs:
      - build-with-gradle
    permissions:
      contents: read
      packages: write
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: litter-jar

      # Image repo must be lowercase and GitHub Actions doesn't have easy string manipulation.
      #   Was causing issues when username had an uppercase letter
      #   See: https://github.com/orgs/community/discussions/10553
      - name: Set image path (to lowercase)
        id: image-path
        run: |
          imagePath="${REGISTRY}/${GITHUB_REPOSITORY,,}"
          echo "image_path=$imagePath" >> $GITHUB_OUTPUT
          echo "Image path: $imagePath"

      # Read version from gradle.properties and append to output.
      #   This will override the version in the Helm chart to avoid scattering manual version tags
      - name: Read version from gradle.properties
        id: app-version
        run: |
          VERSION=$(grep "^version=" gradle.properties | cut -d'=' -f2 | tr -d '[:space:]')
          if [ -z "$VERSION" ]; then
            echo "Error: Version not found in gradle.properties"; exit 1
          fi
          echo "app_version=$VERSION" >> $GITHUB_OUTPUT

      - name: Log into registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ steps.image-path.outputs.image_path }}
          tags: |
            ${{ steps.app-version.outputs.app_version }}
            ${{ github.sha }}
          flavor: latest=true # this will tag the image with 'latest' as well as SHA and app version

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy-to-aks:
    runs-on: ubuntu-latest
    needs: image-and-push
    timeout-minutes: 25
    env:
      # Azure credentials (cannot use azure/login action with service principal)
      #   see: https://github.com/hashicorp/terraform-provider-azurerm/issues/22034
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      TERRAFORM_WORKING_DIR: ./terraform
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Determine the deployment environment based on the trigger
      # If workflow is triggered by a pull request:
      #   ... and the base branch is 'main': staging
      #   ... otherwise: dev
      # If workflow is triggered by manual dispatch:
      #   ... use the environment input
      # The environment determines the Helm values file and the release name to use
      - name: Determine Environment
        id: determine-env
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            if [[ "${{ github.event.pull_request.base.ref }}" == "main" ]]; then
              environment="staging"
            else
              environment="dev"
            fi
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            environment="${{ github.event.inputs.environment }}"
          else
            echo "Error: Unsupported event '${{ github.event_name }}'."
            exit 1
          fi
          # Export outputs for use in Terraform commands
          echo "environment=$environment" >> $GITHUB_OUTPUT
          echo "values_file=values.${environment}.yaml" >> $GITHUB_OUTPUT
          echo "release_name=${environment}" >> $GITHUB_OUTPUT
          echo "Determined environment: $environment"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.10.0

      - name: Terraform init
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
        run: terraform init

      - name: Terraform validate
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
        run: terraform validate

      - name: Terraform plan
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
        id: tf-plan
        run: |
          terraform plan \
            -var-file="example.tfvars" \
            -var "az_dns_rg=${{ env.AZ_DNS_RG }}" \
            -var "az_dns_zone_name=${{ env.AZ_DNS_ZONE_NAME }}" \
            -var "az_subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
            -var "app_image_repo_url=${{ steps.image-path.outputs.image_path }}" \
            -var "app_image_tag=${{ github.sha }}" \
            -var "app_environment=${{ steps.determine-env.outputs.environment }}" \
            -out=tfplan

      - name: Terraform apply
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
        run: terraform apply -auto-approve tfplan
