# This workflow automatically cleans up ephemeral PR deployment environments when
#   a pull request is closed (without merging) to avoid resource proliferation.
name: PR Cleanup
on:
  pull_request:
    types: [ closed ]

jobs:
  cleanup:
    runs-on: ubuntu-latest
    # Only run cleanup for PRs that are closed without merge or after merge (cleanup applies in both cases)
    if: ${{ github.event.pull_request.state == 'closed' }}
    env:
      working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
    permissions:
      contents: read
    timeout-minutes: 10 # this may take a while
    steps:
      - name: Determine environment code
        id: determine_env_code
        run: |
          envCode=pr-${{ github.event.pull_request.number }}-staging
          echo "env_code=$envCode" >> $GITHUB_ENV
          echo "Environment code: $envCode"
        shell: bash

      - name: Git checkout for Terraform files
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          ref: ${{ github.event.workflow_run.head_sha || github.sha }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd
        with:
          terraform_version: "~> 1.10.0"

      # Set the backend key dynamically
      # Ideally the 'azurerm' backend would support 'workspace_key_prefix = "env"' but it doesn't
      #   See: https://github.com/hashicorp/terraform/issues/28985
      # To get around this and have our deployments isolated, this job does a janky implementation of this
      #   by updating the key in the backend.tf file.
      # Again, this is a workaround and not the best practice, but we have to make due until the backend supports it.
      - name: Update Terraform backend key dynamically
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
        env:
          BACKEND_FILENAME: "backend.tf" # within the working directory
          STATE_KEY_PREFIX: "env-" # Prefix for the state key
          WORKSPACE_CODE: ${{ steps.determine_env_code.outputs.env_code }}
        run: |
          # Construct the new key by prepending the prefix to the workspace code
          NEW_KEY="${STATE_KEY_PREFIX}${WORKSPACE_CODE}.tfstate"
          echo "Updating Terraform backend key to ${NEW_KEY}"
          # Use extended regular expressions to update the key, regardless of whitespace differences
          sed -E -i "s/^[[:space:]]*key[[:space:]]*=[[:space:]]*\"[^\"]*\"/  key = \"${NEW_KEY}\"/" $BACKEND_FILENAME

      - name: Select Terraform workspace
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
        run: terraform workspace select ${{ steps.determine_env_code.outputs.env_code }}

      - name: Terraform init
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
        run: terraform init

      - name: Terraform destroy
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
        run: |
          echo "Cleaning up ephemeral environment for PR #${{ github.event.pull_request.number }}"
          terraform destroy -auto-approve -var "app_environment=${{ steps.determine_env_code.outputs.env_code }}"
